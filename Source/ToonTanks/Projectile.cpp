// Fill out your copyright notice in the Description page of Project Settings.


#include "Projectile.h"
#include "Components/StaticMeshComponent.h"
#include "GameFramework/ProjectileMovementComponent.h"
#include "GameFramework/DamageType.h"
#include "Kismet/GameplayStatics.h"
#include "Particles/ParticleSystemComponent.h"

// Sets default values
AProjectile::AProjectile()
{
 	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = false;

	BaseMesh = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("Base Mesh"));
	RootComponent = BaseMesh;
	
	ProjectileMovement = CreateDefaultSubobject<UProjectileMovementComponent>(TEXT("Projectile Movement Component"));
	ProjectileMovement->MaxSpeed = 1300.f;
	ProjectileMovement->InitialSpeed = 1300.f;
	// this is a component - not adding it to the hierarchy of objects

	// Create the smoke trail that will attach and follow the projectile
	SmokeTrailParticles = CreateDefaultSubobject<UParticleSystemComponent>(TEXT("Smoke Trail Particles Component"));
	SmokeTrailParticles->SetupAttachment(RootComponent);
}

// Called when the game starts or when spawned
void AProjectile::BeginPlay()
{
	Super::BeginPlay();
	
	// you can find what the signature needs to be by drilling into OnComponentHit and then drilling into the type FComponentHitSignature
	// the documentation for this on the unreal site is garbage.
	BaseMesh->OnComponentHit.AddDynamic(this, &AProjectile::OnHit);
}

// Called every frame
void AProjectile::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

}

/// <summary>
/// Fires off in response to a projectile mesh hitting something.
/// </summary>
/// <param name="HitComponent">The mesh that did the hitting (the mesh of the projectile)</param>
/// <param name="OtherActor">The actor it hit</param>
/// <param name="OtherComponent">The component in the actor that was hit.</param>
/// <param name="NormalImpulse">The direction and magnitude of the impulse generated by striking the object</param>
/// <param name="Hit">The FHitResult</param>
void AProjectile::OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComponent, FVector NormalImpulse, const FHitResult& Hit)
{
	auto owner = GetOwner();  //this owner is set in the BasePawn when we spawn the projectile
	if (owner == nullptr || OtherActor == nullptr)
	{
		Destroy();
		return;
	}

	auto instigatorController = owner->GetInstigatorController();
	auto damageTypeClass = UDamageType::StaticClass();

	if (OtherActor != this && OtherActor != owner) // we don't want to damage ourselves or our owning actor
	{
		UGameplayStatics::ApplyDamage(OtherActor, //the damaged actor
			Damage, //the damage
			instigatorController, //the event instigator
			this, //the damage causer
			damageTypeClass);  //the damage type class
		
		UGameplayStatics::SpawnEmitterAtLocation(this, HitParticles, GetActorLocation(), GetActorRotation());
	}
	
	Destroy(); //once we've applied damage... hasta projectile.
}

